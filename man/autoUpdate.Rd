% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoUpdate.R
\name{autoUpdate}
\alias{autoUpdate}
\title{Run MCMC iterations until full convergence}
\usage{
autoUpdate(x, iter = 20000, maxit = 2e+05, Rhat = 1.1, thin = 1)
}
\arguments{
\item{x}{An object of class `FluHMM', from which to generate posterior samples.}

\item{iter}{Number of iterations to run.}

\item{maxit}{Maximum number of iterations to run before giving up.}

\item{Rhat}{Gelman-Rubin diagnostic cutoff value to determine convergence
(only for the sigma[1] parameter).}

\item{thin}{Thinning interval. If the beta[2] and beta[3] parameters are very slow to mix,
and your RAM memory is insufficient, it is advisable to use a larger thinning interval
(e.g. 10 or 50), i.e. keep in the posterior sample every \code{thin} MCMC iteration.}
}
\value{
None. The function mutates its argument `x' directly.
}
\description{
This function runs further MCMC iteration to extend the current posterior sample
until convergence is reached for all parameters.
}
\details{
Most parameters in the model converge fairly quickly, but mixing is slower for parameters
   beta[2] and beta[3] (i.e. the slopes of the epidemic growth and epidemic decline phases). Initial
   convergence of the model is judged by monitoring the sigma[1] parameter and is performed by the
   function \code{\link{autoInitConv}}, which is usually run in the \code{\link{FluHMM}} constructor.
   If all other parameters have converged but beta[2] and beta[3] have not, due to slow mixing, then
   it is advisable to run the MCMC chain for longer, until beta[2] and beta[3] cover their posterior
   distributions adequately. This can be done manually using \code{\link{update}} with argument
   \code{enlarge=TRUE}. Alternatively \code{autoUpdate} can be used, which extends the sample by
   \code{iter} iterations, checks the Gelman-Rubin diagnostic for all parameters, and if convergence
   has not been reached it extends again the sample until convergence or until \code{maxit} iterations.

   In some cases (usually near the end of the influenza surveillance period, when all five model phases
   have occured) mixing is very slow and the chains need to be run for very long. This requires lots of
   RAM memory and a fair amount of CPU power to handle the very large posterior sample. In such cases
   it is advisable to thin the chain (i.e. by 10 or 20, i.e. keep every 10th or 20th element in the MCMC
   chain), to generate a smaller posterior sample with good coverage of the posterior distribution.
}

